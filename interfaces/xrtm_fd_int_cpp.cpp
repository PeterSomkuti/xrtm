/*******************************************************************************
 * This file was generated by bindx version 0.01.  Edit at your own risk.
 ******************************************************************************/

#include <gutil.h>

#include <xrtm_fd_interface.h>

#include "xrtm_fd_int_cpp.h"


xrtm_fd_int_cpp::xrtm_fd_int_cpp(xrtm_data *xrtm, int n_derivs)
{
     int r;
     r = xrtm_fd_create(&d, xrtm, n_derivs);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


xrtm_fd_int_cpp::~xrtm_fd_int_cpp()
{
     int r;
     r = xrtm_fd_destroy(&d);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


int xrtm_fd_int_cpp::get_n_derivs()
{
     int r;
     r = xrtm_fd_get_n_derivs(&d);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_delta(double *delta)
{
     int r;
     r = xrtm_fd_set_delta(&d, delta);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::get_delta(double *delta)
{
     int r;
     r = xrtm_fd_get_delta(&d, delta);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_F_iso_top_p_1(int i_deriv, double F_iso_top_l)
{
     int r;
     r = xrtm_fd_set_F_iso_top_p_1(&d, i_deriv, F_iso_top_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_F_iso_top_p_n(double *F_iso_top_l)
{
     int r;
     r = xrtm_fd_set_F_iso_top_p_n(&d, F_iso_top_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_F_iso_top_p(int i_deriv)
{
     double r;
     r = xrtm_fd_get_F_iso_top_p(&d, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_F_iso_bot_p_1(int i_deriv, double F_iso_bot_l)
{
     int r;
     r = xrtm_fd_set_F_iso_bot_p_1(&d, i_deriv, F_iso_bot_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_F_iso_bot_p_n(double *F_iso_bot_l)
{
     int r;
     r = xrtm_fd_set_F_iso_bot_p_n(&d, F_iso_bot_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_F_iso_bot_p(int i_deriv)
{
     double r;
     r = xrtm_fd_get_F_iso_bot_p(&d, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_levels_b_p_1(int i_deriv, double *levels_b_l)
{
     int r;
     r = xrtm_fd_set_levels_b_p_1(&d, i_deriv, levels_b_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_levels_b_p_n(double **levels_b_l)
{
     int r;
     r = xrtm_fd_set_levels_b_p_n(&d, levels_b_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_levels_b_p(int i_deriv, double *levels_b_l)
{
     double r;
     r = xrtm_fd_get_levels_b_p(&d, i_deriv, levels_b_l);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_surface_b_p_1(int i_deriv, double surface_b_l)
{
     int r;
     r = xrtm_fd_set_surface_b_p_1(&d, i_deriv, surface_b_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_surface_b_p_n(double *surface_b_l)
{
     int r;
     r = xrtm_fd_set_surface_b_p_n(&d, surface_b_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_surface_b_p(int i_deriv)
{
     double r;
     r = xrtm_fd_get_surface_b_p(&d, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_g_p_11(int i_layer, int i_deriv, double g_l)
{
     int r;
     r = xrtm_fd_set_g_p_11(&d, i_layer, i_deriv, g_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_g_p_n1(int i_deriv, double *g_l)
{
     int r;
     r = xrtm_fd_set_g_p_n1(&d, i_deriv, g_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_g_p_1n(int i_layer, double *g_l)
{
     int r;
     r = xrtm_fd_set_g_p_1n(&d, i_layer, g_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_g_p_nn(double **g_l)
{
     int r;
     r = xrtm_fd_set_g_p_nn(&d, g_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_g_p(int i_layer, int i_deriv)
{
     double r;
     r = xrtm_fd_get_g_p(&d, i_layer, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_coef_p_11(int i_layer, int i_deriv, double **coef_l)
{
     int r;
     r = xrtm_fd_set_coef_p_11(&d, i_layer, i_deriv, coef_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_coef_p_n1(int i_deriv, double ***coef_l)
{
     int r;
     r = xrtm_fd_set_coef_p_n1(&d, i_deriv, coef_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_coef_p_1n(int i_layer, double ***coef_l)
{
     int r;
     r = xrtm_fd_set_coef_p_1n(&d, i_layer, coef_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_coef_p_nn(double ****coef_l)
{
     int r;
     r = xrtm_fd_set_coef_p_nn(&d, coef_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_coef_p(int i_layer, int i_deriv, int i_elem, int i_coef)
{
     double r;
     r = xrtm_fd_get_coef_p(&d, i_layer, i_deriv, i_elem, i_coef);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_omega_p_11(int i_layer, int i_deriv, double omega_l)
{
     int r;
     r = xrtm_fd_set_omega_p_11(&d, i_layer, i_deriv, omega_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_omega_p_n1(int i_deriv, double *omega_l)
{
     int r;
     r = xrtm_fd_set_omega_p_n1(&d, i_deriv, omega_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_omega_p_1n(int i_layer, double *omega_l)
{
     int r;
     r = xrtm_fd_set_omega_p_1n(&d, i_layer, omega_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_omega_p_nn(double **omega_l)
{
     int r;
     r = xrtm_fd_set_omega_p_nn(&d, omega_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_omega_p(int i_layer, int i_deriv)
{
     double r;
     r = xrtm_fd_get_omega_p(&d, i_layer, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_ltau_p_11(int i_layer, int i_deriv, double ltau_l)
{
     int r;
     r = xrtm_fd_set_ltau_p_11(&d, i_layer, i_deriv, ltau_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_ltau_p_n1(int i_deriv, double *ltau_l)
{
     int r;
     r = xrtm_fd_set_ltau_p_n1(&d, i_deriv, ltau_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_ltau_p_1n(int i_layer, double *ltau_l)
{
     int r;
     r = xrtm_fd_set_ltau_p_1n(&d, i_layer, ltau_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_ltau_p_nn(double **ltau_l)
{
     int r;
     r = xrtm_fd_set_ltau_p_nn(&d, ltau_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_ltau_p(int i_layer, int i_deriv)
{
     double r;
     r = xrtm_fd_get_ltau_p(&d, i_layer, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_kernel_ampfac_p_1(int i_kernel, int i_deriv, double ampfac_l)
{
     int r;
     r = xrtm_fd_set_kernel_ampfac_p_1(&d, i_kernel, i_deriv, ampfac_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_kernel_ampfac_p_n(int i_kernel, double *ampfac_l)
{
     int r;
     r = xrtm_fd_set_kernel_ampfac_p_n(&d, i_kernel, ampfac_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_kernel_ampfac_p(int i_kernel, int i_deriv)
{
     double r;
     r = xrtm_fd_get_kernel_ampfac_p(&d, i_kernel, i_deriv);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::set_kernel_params_p_11(int i_kernel, int i_deriv, int i_param, double param_l)
{
     int r;
     r = xrtm_fd_set_kernel_params_p_11(&d, i_kernel, i_deriv, i_param, param_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_kernel_params_p_1n(int i_kernel, int i_deriv, double *params_l)
{
     int r;
     r = xrtm_fd_set_kernel_params_p_1n(&d, i_kernel, i_deriv, params_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_kernel_params_p_n1(int i_kernel, int i_param, double *params_l)
{
     int r;
     r = xrtm_fd_set_kernel_params_p_n1(&d, i_kernel, i_param, params_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::set_kernel_params_p_nn(int i_kernel, double **params_l)
{
     int r;
     r = xrtm_fd_set_kernel_params_p_nn(&d, i_kernel, params_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


double xrtm_fd_int_cpp::get_kernel_params_p(int i_kernel, int i_deriv, int i_param)
{
     double r;
     r = xrtm_fd_get_kernel_params_p(&d, i_kernel, i_deriv, i_param);
     if (r == XRTM_DBL_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
     return r;
}


void xrtm_fd_int_cpp::solution(xrtm_int_cpp::solver_mask solver, int solutions, xrtm_fd_int_cpp::method_type method, int n_out_phis, double **out_phis, double ****I_p, double ****I_m, double *****K_p, double *****K_m, double *mean_p, double *mean_m, double **mean_p_l, double **mean_m_l, double *flux_p, double *flux_m, double **flux_p_l, double **flux_m_l, double *flux_div, double **flux_div_l)
{
     int r;
     r = xrtm_fd_solution(&d, (enum xrtm_solver_mask) solver, solutions, (enum xrtm_fd_method_type) method, n_out_phis, out_phis, I_p, I_m, K_p, K_m, mean_p, mean_m, mean_p_l, mean_m_l, flux_p, flux_m, flux_p_l, flux_m_l, flux_div, flux_div_l);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


void xrtm_fd_int_cpp::radiance(xrtm_int_cpp::solver_mask solver, xrtm_fd_int_cpp::method_type method, int n_out_phis, double **out_phis, double ****I_p, double ****I_m, double *****K_p, double *****K_m)
{
     int r;
     r = xrtm_fd_radiance(&d, (enum xrtm_solver_mask) solver, (enum xrtm_fd_method_type) method, n_out_phis, out_phis, I_p, I_m, K_p, K_m);
     if (r == XRTM_INT_ERROR)
          throw xrtm_fd_int_cpp::ERROR;
}


