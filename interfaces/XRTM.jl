#***********************************************************************
# This file was generated by bindx version 0.01.  Edit at your own risk.
#***********************************************************************

module XRTM
using Printf

library_path = "../interfaces/XRTM"

struct XRTMError <: Exception end

XRTM_INT_ERROR = -2147483647
XRTM_DBL_ERROR = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000


function options_to_mask(list)
    mask = 0
    for i in 1:length(list)
        r = @ccall xrtm_option_name_to_mask(list[i]::Cstring)::Cint
        if r == -1
            error("options_to_mask()")
        end
        mask |= r
    end
    mask
end

function solvers_to_mask(list)
    mask = 0
    for i in 1:length(list)
        r = @ccall xrtm_solver_name_to_mask(list[i]::Cstring)::Cint
        if r == -1
            error("solvers_to_mask()")
        end
        mask |= r
    end
    mask
end

function solver_mask_to_list(mask)
    list = Vector{String}(undef, 0)
    global i = 0
    while true
        mask2 = @ccall xrtm_solver_index_to_mask(i::Cint)::Cint
        if mask2 == -1
            break
        end
        if mask & mask2 != 0
            name = @ccall xrtm_solver_index_to_name(i::Cint)::Cstring
            push!(list, unsafe_string(name))
        end
        global i += 1
    end
    list
end

function option_mask_to_list(mask)
    list = Vector{String}(undef, 0)
    global i = 0
    while true
        mask2 = @ccall xrtm_option_index_to_mask(i::Cint)::Cint
        if mask2 == -1
            break
        end
        if mask & mask2 != 0
            name = @ccall xrtm_option_index_to_name(i::Cint)::Cstring
            push!(list, unsafe_string(name))
        end
        global i += 1
    end
    list
end


function kernel_list_to_array(list)
    n = length(list)
    array = Array{Int32,1}(undef, n)
    for i = 1:n
        r = @ccall "XRTM".xrtm_kernel_name_to_value(list[i]::Cstring)::Cint
        if r == -1
            error("list_to_mask()")
        end
        array[i] = r
    end
    n, array
end


function create(options_list::Vector{String}, solvers_list::Vector{String}, max_coef, n_quad, n_stokes, n_derivs, n_layers, n_theta_0s, n_kernel_quad, kernels_list::Vector{String}, n_out_levels, n_out_thetas)
    options = options_to_mask(options_list)
    solvers = solvers_to_mask(solvers_list)
    n_kernels, kernels = kernel_list_to_array(kernels_list)
    r = ccall((:xrtm_create2, library_path), Ptr{Cvoid}, (Cint, Cint, Cint, Cint, Cint, Cint, Cint, Cint, Cint, Cint, Ptr{Cint}, Cint, Cint), options, solvers, max_coef, n_quad, n_stokes, n_derivs, n_layers, n_theta_0s, n_kernels, n_kernel_quad, kernels, n_out_levels, n_out_thetas)
    if r == C_NULL
        error("xrtm_create2()")
    end
    r
end


function destroy(d)
    r = ccall((:xrtm_destroy2, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_destroy2()")
    end
end


function get_options(d)
    r = ccall((:xrtm_get_options, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_options()")
    end
    mask_to_list(r, "xrtm_option_index_to_mask", "xrtm_option_index_to_name")
end


function get_solvers(d)
    r = ccall((:xrtm_get_solvers, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_solvers()")
    end
    mask_to_list(r, "xrtm_solver_index_to_mask", "xrtm_solver_index_to_name")
end


function get_max_coef(d)
    r = ccall((:xrtm_get_max_coef, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_max_coef()")
    end
    r
end


function get_n_quad(d)
    r = ccall((:xrtm_get_n_quad, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_quad()")
    end
    r
end


function get_n_stokes(d)
    r = ccall((:xrtm_get_n_stokes, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_stokes()")
    end
    r
end


function get_n_derivs(d)
    r = ccall((:xrtm_get_n_derivs, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_derivs()")
    end
    r
end


function get_n_layers(d)
    r = ccall((:xrtm_get_n_layers, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_layers()")
    end
    r
end


function get_n_kernels(d)
    r = ccall((:xrtm_get_n_kernels, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_kernels()")
    end
    r
end


function get_n_kernel_quad(d)
    r = ccall((:xrtm_get_n_kernel_quad, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_kernel_quad()")
    end
    r
end


function get_kernel(d, i_kernel)
    r = ccall((:xrtm_get_kernel, library_path), Cint, (Ptr{Cvoid}, Cint), d, i_kernel)
    if r == XRTM_INT_ERROR
        error("xrtm_get_kernel()")
    end
    r = ccall((:xrtm_kernel_value_to_name, library_path), Cstring, (Cint, ), r)
    if r == C_NULL
        error("get_kernel()")
    end
    unsafe_string(r)
end


function get_n_out_levels(d)
    r = ccall((:xrtm_get_n_out_levels, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_out_levels()")
    end
    r
end


function get_n_out_thetas(d)
    r = ccall((:xrtm_get_n_out_thetas, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_out_thetas()")
    end
    r
end


function get_n_out_thetas_2(d)
    r = ccall((:xrtm_get_n_out_thetas_2, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_out_thetas_2()")
    end
    r
end


function set_doub_d_tau(d, d_tau)
    r = ccall((:xrtm_set_doub_d_tau, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, d_tau)
    if r == XRTM_INT_ERROR
        error("xrtm_set_doub_d_tau()")
    end
end


function get_doub_d_tau(d)
    r = ccall((:xrtm_get_doub_d_tau, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_doub_d_tau()")
    end
    r
end


function set_pade_params(d, pade_s, pade_r)
    r = ccall((:xrtm_set_pade_params, library_path), Cint, (Ptr{Cvoid}, Cint, Cint), d, pade_s, pade_r)
    if r == XRTM_INT_ERROR
        error("xrtm_set_pade_params()")
    end
end


function get_pade_params(d)
    pade_s = Ref{Cint}(0)
    pade_r = Ref{Cint}(0)
    r = ccall((:xrtm_get_pade_params, library_path), Cint, (Ptr{Cvoid}, Ref{Cint}, Ref{Cint}), d, pade_s, pade_r)
    if r == XRTM_INT_ERROR
        error("xrtm_get_pade_params()")
    end
    pade_s[], pade_r[]
end


function set_sos_params(d, max_os, max_tau, sos_tol)
    r = ccall((:xrtm_set_sos_params, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble, Cdouble), d, max_os, max_tau, sos_tol)
    if r == XRTM_INT_ERROR
        error("xrtm_set_sos_params()")
    end
end


function get_sos_params(d)
    max_os = Ref{Cint}(0)
    max_tau = Ref{Cdouble}(0)
    sos_tol = Ref{Cdouble}(0)
    r = ccall((:xrtm_get_sos_params, library_path), Cint, (Ptr{Cvoid}, Ref{Cint}, Ref{Cdouble}, Ref{Cdouble}), d, max_os, max_tau, sos_tol)
    if r == XRTM_INT_ERROR
        error("xrtm_get_sos_params()")
    end
    max_os[], max_tau[], sos_tol[]
end


function set_fourier_tol(d, fourier_tol)
    r = ccall((:xrtm_set_fourier_tol, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, fourier_tol)
    if r == XRTM_INT_ERROR
        error("xrtm_set_fourier_tol()")
    end
end


function get_fourier_tol(d)
    r = ccall((:xrtm_get_fourier_tol, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_fourier_tol()")
    end
    r
end


function set_lambda(d, lambda)
    r = ccall((:xrtm_set_lambda, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, lambda)
    if r == XRTM_INT_ERROR
        error("xrtm_set_lambda()")
    end
end


function get_lambda(d)
    r = ccall((:xrtm_get_lambda, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_lambda()")
    end
    r
end


function set_planet_r(d, planet_r)
    r = ccall((:xrtm_set_planet_r, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, planet_r)
    if r == XRTM_INT_ERROR
        error("xrtm_set_planet_r()")
    end
end


function get_planet_r(d)
    r = ccall((:xrtm_get_planet_r, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_planet_r()")
    end
    r
end


function set_levels_z(d, levels_z::Array{Float64, 1})
    dims_levels_z = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_levels_z_levels_z_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, levels_z, dims_levels_z)
    dims = collect(UInt, size(levels_z))
    if dims[1] != dims_levels_z[1]
        error(@sprintf("dimension 1 of levels_z input (%d) must be == %d", dims[1], dims_levels_z[1]))
    end
    r = ccall((:xrtm_set_levels_z, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, levels_z)
    if r == XRTM_INT_ERROR
        error("xrtm_set_levels_z()")
    end
end


function get_levels_z(d)
    dims_levels_z = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_levels_z_levels_z_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_levels_z)
    levels_z = Array{Float64, 1}(undef, (dims_levels_z[1]))
    r = ccall((:xrtm_get_levels_z, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, levels_z)
    if r == XRTM_INT_ERROR
        error("xrtm_get_levels_z()")
    end
    levels_z
end


function set_out_levels(d, out_levels::Array{Int32, 1})
    dims_out_levels = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_out_levels_out_levels_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cint}, Ref{Csize_t}), d, out_levels, dims_out_levels)
    dims = collect(UInt, size(out_levels))
    if dims[1] != dims_out_levels[1]
        error(@sprintf("dimension 1 of out_levels input (%d) must be == %d", dims[1], dims_out_levels[1]))
    end
    r = ccall((:xrtm_set_out_levels, library_path), Cint, (Ptr{Cvoid}, Ptr{Cint}), d, out_levels)
    if r == XRTM_INT_ERROR
        error("xrtm_set_out_levels()")
    end
end


function get_out_levels(d)
    dims_out_levels = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_out_levels_out_levels_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_out_levels)
    out_levels = Array{Int32, 1}(undef, (dims_out_levels[1]))
    r = ccall((:xrtm_get_out_levels, library_path), Cint, (Ptr{Cvoid}, Ref{Cint}), d, out_levels)
    if r == XRTM_INT_ERROR
        error("xrtm_get_out_levels()")
    end
    out_levels
end


function set_out_taus(d, out_taus::Array{Float64, 1})
    dims_out_taus = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_out_taus_out_taus_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, out_taus, dims_out_taus)
    dims = collect(UInt, size(out_taus))
    if dims[1] != dims_out_taus[1]
        error(@sprintf("dimension 1 of out_taus input (%d) must be == %d", dims[1], dims_out_taus[1]))
    end
    r = ccall((:xrtm_set_out_taus, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, out_taus)
    if r == XRTM_INT_ERROR
        error("xrtm_set_out_taus()")
    end
end


function get_out_taus(d)
    dims_out_taus = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_out_taus_out_taus_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_out_taus)
    out_taus = Array{Float64, 1}(undef, (dims_out_taus[1]))
    r = ccall((:xrtm_get_out_taus, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, out_taus)
    if r == XRTM_INT_ERROR
        error("xrtm_get_out_taus()")
    end
    out_taus
end


function set_out_thetas(d, out_thetas::Array{Float64, 1})
    dims_out_thetas = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_out_thetas_out_thetas_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, out_thetas, dims_out_thetas)
    dims = collect(UInt, size(out_thetas))
    if dims[1] != dims_out_thetas[1]
        error(@sprintf("dimension 1 of out_thetas input (%d) must be == %d", dims[1], dims_out_thetas[1]))
    end
    r = ccall((:xrtm_set_out_thetas, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, out_thetas)
    if r == XRTM_INT_ERROR
        error("xrtm_set_out_thetas()")
    end
end


function get_out_thetas(d)
    dims_out_thetas = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_out_thetas_out_thetas_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_out_thetas)
    out_thetas = Array{Float64, 1}(undef, (dims_out_thetas[1]))
    r = ccall((:xrtm_get_out_thetas, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, out_thetas)
    if r == XRTM_INT_ERROR
        error("xrtm_get_out_thetas()")
    end
    out_thetas
end


function set_F_iso_top(d, F_iso_top)
    r = ccall((:xrtm_set_F_iso_top, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, F_iso_top)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_top()")
    end
end


function get_F_iso_top(d)
    r = ccall((:xrtm_get_F_iso_top, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_F_iso_top()")
    end
    r
end


function set_F_iso_top_l_1(d, i_deriv, F_iso_top_l)
    r = ccall((:xrtm_set_F_iso_top_l_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_deriv, F_iso_top_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_top_l_1()")
    end
end


function set_F_iso_top_l_n(d, F_iso_top_l::Array{Float64, 1})
    dims_F_iso_top_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_F_iso_top_l_n_F_iso_top_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, F_iso_top_l, dims_F_iso_top_l)
    dims = collect(UInt, size(F_iso_top_l))
    if dims[1] != dims_F_iso_top_l[1]
        error(@sprintf("dimension 1 of F_iso_top_l input (%d) must be == %d", dims[1], dims_F_iso_top_l[1]))
    end
    r = ccall((:xrtm_set_F_iso_top_l_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, F_iso_top_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_top_l_n()")
    end
end


function get_F_iso_top_l(d, i_deriv)
    r = ccall((:xrtm_get_F_iso_top_l, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_F_iso_top_l()")
    end
    r
end


function set_F_iso_bot(d, F_iso_bot)
    r = ccall((:xrtm_set_F_iso_bot, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, F_iso_bot)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_bot()")
    end
end


function get_F_iso_bot(d)
    r = ccall((:xrtm_get_F_iso_bot, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_F_iso_bot()")
    end
    r
end


function set_F_iso_bot_l_1(d, i_deriv, F_iso_bot_l)
    r = ccall((:xrtm_set_F_iso_bot_l_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_deriv, F_iso_bot_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_bot_l_1()")
    end
end


function set_F_iso_bot_l_n(d, F_iso_bot_l::Array{Float64, 1})
    dims_F_iso_bot_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_F_iso_bot_l_n_F_iso_bot_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, F_iso_bot_l, dims_F_iso_bot_l)
    dims = collect(UInt, size(F_iso_bot_l))
    if dims[1] != dims_F_iso_bot_l[1]
        error(@sprintf("dimension 1 of F_iso_bot_l input (%d) must be == %d", dims[1], dims_F_iso_bot_l[1]))
    end
    r = ccall((:xrtm_set_F_iso_bot_l_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, F_iso_bot_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_iso_bot_l_n()")
    end
end


function get_F_iso_bot_l(d, i_deriv)
    r = ccall((:xrtm_get_F_iso_bot_l, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_F_iso_bot_l()")
    end
    r
end


function set_F_0(d, F_0)
    r = ccall((:xrtm_set_F_0, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, F_0)
    if r == XRTM_INT_ERROR
        error("xrtm_set_F_0()")
    end
end


function get_F_0(d)
    r = ccall((:xrtm_get_F_0, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_F_0()")
    end
    r
end


function set_theta_0(d, theta_0)
    r = ccall((:xrtm_set_theta_0, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, theta_0)
    if r == XRTM_INT_ERROR
        error("xrtm_set_theta_0()")
    end
end


function get_theta_0(d)
    r = ccall((:xrtm_get_theta_0, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_theta_0()")
    end
    r
end


function set_phi_0(d, phi_0)
    r = ccall((:xrtm_set_phi_0, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, phi_0)
    if r == XRTM_INT_ERROR
        error("xrtm_set_phi_0()")
    end
end


function get_phi_0(d)
    r = ccall((:xrtm_get_phi_0, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_phi_0()")
    end
    r
end


function set_levels_b(d, levels_b::Array{Float64, 1})
    dims_levels_b = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_levels_b_levels_b_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, levels_b, dims_levels_b)
    dims = collect(UInt, size(levels_b))
    if dims[1] != dims_levels_b[1]
        error(@sprintf("dimension 1 of levels_b input (%d) must be == %d", dims[1], dims_levels_b[1]))
    end
    r = ccall((:xrtm_set_levels_b, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, levels_b)
    if r == XRTM_INT_ERROR
        error("xrtm_set_levels_b()")
    end
end


function get_levels_b(d)
    dims_levels_b = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_levels_b_levels_b_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_levels_b)
    levels_b = Array{Float64, 1}(undef, (dims_levels_b[1]))
    r = ccall((:xrtm_get_levels_b, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, levels_b)
    if r == XRTM_INT_ERROR
        error("xrtm_get_levels_b()")
    end
    levels_b
end


function set_levels_b_l_1(d, i_deriv, levels_b_l::Array{Float64, 1})
    dims_levels_b_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_levels_b_l_1_levels_b_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_deriv, levels_b_l, dims_levels_b_l)
    dims = collect(UInt, size(levels_b_l))
    if dims[1] != dims_levels_b_l[1]
        error(@sprintf("dimension 1 of levels_b_l input (%d) must be == %d", dims[1], dims_levels_b_l[1]))
    end
    r = ccall((:xrtm_set_levels_b_l_1, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_deriv, levels_b_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_levels_b_l_1()")
    end
end


function set_levels_b_l_n(d, levels_b_l::Array{Float64, 2})
    dims_levels_b_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_levels_b_l_n_levels_b_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, levels_b_l, dims_levels_b_l)
    dims = collect(UInt, size(levels_b_l))
    if dims[1] != dims_levels_b_l[2]
        error(@sprintf("dimension 1 of levels_b_l input (%d) must be == %d", dims[1], dims_levels_b_l[2]))
    end
    dims = collect(UInt, size(levels_b_l))
    if dims[2] != dims_levels_b_l[1]
        error(@sprintf("dimension 2 of levels_b_l input (%d) must be == %d", dims[2], dims_levels_b_l[1]))
    end
    levels_b_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), levels_b_l, 2, dims_levels_b_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_levels_b_l_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, levels_b_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_levels_b_l_n()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), levels_b_l_mmap, 2)
end


function get_levels_b_l(d, i_deriv)
    dims_levels_b_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:get_levels_b_l_levels_b_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, i_deriv, dims_levels_b_l)
    levels_b_l = Array{Float64, 1}(undef, (dims_levels_b_l[1]))
    r = ccall((:xrtm_get_levels_b_l, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Cdouble}), d, i_deriv, levels_b_l)
    if r == XRTM_INT_ERROR
        error("xrtm_get_levels_b_l()")
    end
    levels_b_l
end


function set_surface_b(d, surface_b)
    r = ccall((:xrtm_set_surface_b, library_path), Cint, (Ptr{Cvoid}, Cdouble), d, surface_b)
    if r == XRTM_INT_ERROR
        error("xrtm_set_surface_b()")
    end
end


function get_surface_b(d)
    r = ccall((:xrtm_get_surface_b, library_path), Cdouble, (Ptr{Cvoid}, ), d)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_surface_b()")
    end
    r
end


function set_surface_b_l_1(d, i_deriv, surface_b_l)
    r = ccall((:xrtm_set_surface_b_l_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_deriv, surface_b_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_surface_b_l_1()")
    end
end


function set_surface_b_l_n(d, surface_b_l::Array{Float64, 1})
    dims_surface_b_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_surface_b_l_n_surface_b_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, surface_b_l, dims_surface_b_l)
    dims = collect(UInt, size(surface_b_l))
    if dims[1] != dims_surface_b_l[1]
        error(@sprintf("dimension 1 of surface_b_l input (%d) must be == %d", dims[1], dims_surface_b_l[1]))
    end
    r = ccall((:xrtm_set_surface_b_l_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, surface_b_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_surface_b_l_n()")
    end
end


function get_surface_b_l(d, i_deriv)
    r = ccall((:xrtm_get_surface_b_l, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_surface_b_l()")
    end
    r
end


function set_g_1(d, i_layer, g)
    r = ccall((:xrtm_set_g_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_layer, g)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_1()")
    end
end


function set_g_n(d, g::Array{Float64, 1})
    dims_g = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_g_n_g_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, g, dims_g)
    dims = collect(UInt, size(g))
    if dims[1] != dims_g[1]
        error(@sprintf("dimension 1 of g input (%d) must be == %d", dims[1], dims_g[1]))
    end
    r = ccall((:xrtm_set_g_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, g)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_n()")
    end
end


function get_g(d, i_layer)
    r = ccall((:xrtm_get_g, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_layer)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_g()")
    end
    r
end


function set_g_l_11(d, i_layer, i_deriv, g_l)
    r = ccall((:xrtm_set_g_l_11, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cdouble), d, i_layer, i_deriv, g_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_l_11()")
    end
end


function set_g_l_n1(d, i_deriv, g_l::Array{Float64, 1})
    dims_g_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_g_l_n1_g_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_deriv, g_l, dims_g_l)
    dims = collect(UInt, size(g_l))
    if dims[1] != dims_g_l[1]
        error(@sprintf("dimension 1 of g_l input (%d) must be == %d", dims[1], dims_g_l[1]))
    end
    r = ccall((:xrtm_set_g_l_n1, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_deriv, g_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_l_n1()")
    end
end


function set_g_l_1n(d, i_layer, g_l::Array{Float64, 1})
    dims_g_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_g_l_1n_g_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, g_l, dims_g_l)
    dims = collect(UInt, size(g_l))
    if dims[1] != dims_g_l[1]
        error(@sprintf("dimension 1 of g_l input (%d) must be == %d", dims[1], dims_g_l[1]))
    end
    r = ccall((:xrtm_set_g_l_1n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_layer, g_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_l_1n()")
    end
end


function set_g_l_nn(d, g_l::Array{Float64, 2})
    dims_g_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_g_l_nn_g_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, g_l, dims_g_l)
    dims = collect(UInt, size(g_l))
    if dims[1] != dims_g_l[2]
        error(@sprintf("dimension 1 of g_l input (%d) must be == %d", dims[1], dims_g_l[2]))
    end
    dims = collect(UInt, size(g_l))
    if dims[2] != dims_g_l[1]
        error(@sprintf("dimension 2 of g_l input (%d) must be == %d", dims[2], dims_g_l[1]))
    end
    g_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), g_l, 2, dims_g_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_g_l_nn, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, g_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_g_l_nn()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), g_l_mmap, 2)
end


function get_g_l(d, i_layer, i_deriv)
    r = ccall((:xrtm_get_g_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint), d, i_layer, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_g_l()")
    end
    r
end


function set_coef_1(d, i_layer, n_coef_layer, coef::Array{Float64, 2})
    dims_coef = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_coef_1_coef_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, n_coef_layer, coef, dims_coef)
    dims = collect(UInt, size(coef))
    if dims[1] != dims_coef[2]
        error(@sprintf("dimension 1 of coef input (%d) must be == %d", dims[1], dims_coef[2]))
    end
    dims = collect(UInt, size(coef))
    if dims[2] != dims_coef[1]
        error(@sprintf("dimension 2 of coef input (%d) must be == %d", dims[2], dims_coef[1]))
    end
    coef_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef, 2, dims_coef, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}), d, i_layer, n_coef_layer, coef_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_1()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_mmap, 2)
end


function set_coef_n(d, n_coef_layer::Array{Int32, 1}, coef::Array{Float64, 3})
    dims_n_coef_layer = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_coef_n_n_coef_layer_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cint}, Ptr{Cdouble}, Ref{Csize_t}), d, n_coef_layer, coef, dims_n_coef_layer)
    dims_coef = Array{UInt64, 1}(undef, (3))
    r = ccall((:set_coef_n_coef_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cint}, Ptr{Cdouble}, Ref{Csize_t}), d, n_coef_layer, coef, dims_coef)
    dims = collect(UInt, size(n_coef_layer))
    if dims[1] != dims_n_coef_layer[1]
        error(@sprintf("dimension 1 of n_coef_layer input (%d) must be == %d", dims[1], dims_n_coef_layer[1]))
    end
    dims = collect(UInt, size(coef))
    if dims[1] != dims_coef[3]
        error(@sprintf("dimension 1 of coef input (%d) must be == %d", dims[1], dims_coef[3]))
    end
    dims = collect(UInt, size(coef))
    if dims[2] != dims_coef[2]
        error(@sprintf("dimension 2 of coef input (%d) must be == %d", dims[2], dims_coef[2]))
    end
    dims = collect(UInt, size(coef))
    if dims[3] != dims_coef[1]
        error(@sprintf("dimension 3 of coef input (%d) must be == %d", dims[3], dims_coef[1]))
    end
    coef_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef, 3, dims_coef, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cint}, Ptr{Cdouble}), d, n_coef_layer, coef_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_n()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_mmap, 3)
end


function get_n_coef(d, i_layer)
    r = ccall((:xrtm_get_n_coef, library_path), Cint, (Ptr{Cvoid}, Cint), d, i_layer)
    if r == XRTM_INT_ERROR
        error("xrtm_get_n_coef()")
    end
    r
end


function get_coef(d, i_layer, i_elem, i_coef)
    r = ccall((:xrtm_get_coef, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint, Cint), d, i_layer, i_elem, i_coef)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_coef()")
    end
    r
end


function set_coef_l_11(d, i_layer, i_deriv, coef_l::Array{Float64, 2})
    dims_coef_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_coef_l_11_coef_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, i_deriv, coef_l, dims_coef_l)
    dims = collect(UInt, size(coef_l))
    if dims[1] != dims_coef_l[2]
        error(@sprintf("dimension 1 of coef_l input (%d) must be == %d", dims[1], dims_coef_l[2]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[2] != dims_coef_l[1]
        error(@sprintf("dimension 2 of coef_l input (%d) must be == %d", dims[2], dims_coef_l[1]))
    end
    coef_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef_l, 2, dims_coef_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_l_11, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}), d, i_layer, i_deriv, coef_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_l_11()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_l_mmap, 2)
end


function set_coef_l_n1(d, i_deriv, coef_l::Array{Float64, 3})
    dims_coef_l = Array{UInt64, 1}(undef, (3))
    r = ccall((:set_coef_l_n1_coef_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_deriv, coef_l, dims_coef_l)
    dims = collect(UInt, size(coef_l))
    if dims[1] != dims_coef_l[3]
        error(@sprintf("dimension 1 of coef_l input (%d) must be == %d", dims[1], dims_coef_l[3]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[2] != dims_coef_l[2]
        error(@sprintf("dimension 2 of coef_l input (%d) must be == %d", dims[2], dims_coef_l[2]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[3] != dims_coef_l[1]
        error(@sprintf("dimension 3 of coef_l input (%d) must be == %d", dims[3], dims_coef_l[1]))
    end
    coef_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef_l, 3, dims_coef_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_l_n1, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_deriv, coef_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_l_n1()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_l_mmap, 3)
end


function set_coef_l_1n(d, i_layer, coef_l::Array{Float64, 3})
    dims_coef_l = Array{UInt64, 1}(undef, (3))
    r = ccall((:set_coef_l_1n_coef_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, coef_l, dims_coef_l)
    dims = collect(UInt, size(coef_l))
    if dims[1] != dims_coef_l[3]
        error(@sprintf("dimension 1 of coef_l input (%d) must be == %d", dims[1], dims_coef_l[3]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[2] != dims_coef_l[2]
        error(@sprintf("dimension 2 of coef_l input (%d) must be == %d", dims[2], dims_coef_l[2]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[3] != dims_coef_l[1]
        error(@sprintf("dimension 3 of coef_l input (%d) must be == %d", dims[3], dims_coef_l[1]))
    end
    coef_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef_l, 3, dims_coef_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_l_1n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_layer, coef_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_l_1n()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_l_mmap, 3)
end


function set_coef_l_nn(d, coef_l::Array{Float64, 4})
    dims_coef_l = Array{UInt64, 1}(undef, (4))
    r = ccall((:set_coef_l_nn_coef_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, coef_l, dims_coef_l)
    dims = collect(UInt, size(coef_l))
    if dims[1] != dims_coef_l[4]
        error(@sprintf("dimension 1 of coef_l input (%d) must be == %d", dims[1], dims_coef_l[4]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[2] != dims_coef_l[3]
        error(@sprintf("dimension 2 of coef_l input (%d) must be == %d", dims[2], dims_coef_l[3]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[3] != dims_coef_l[2]
        error(@sprintf("dimension 3 of coef_l input (%d) must be == %d", dims[3], dims_coef_l[2]))
    end
    dims = collect(UInt, size(coef_l))
    if dims[4] != dims_coef_l[1]
        error(@sprintf("dimension 4 of coef_l input (%d) must be == %d", dims[4], dims_coef_l[1]))
    end
    coef_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), coef_l, 4, dims_coef_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_coef_l_nn, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, coef_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_coef_l_nn()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), coef_l_mmap, 4)
end


function get_coef_l(d, i_layer, i_deriv, i_elem, i_coef)
    r = ccall((:xrtm_get_coef_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint, Cint, Cint), d, i_layer, i_deriv, i_elem, i_coef)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_coef_l()")
    end
    r
end


function set_omega_1(d, i_layer, omega)
    r = ccall((:xrtm_set_omega_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_layer, omega)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_1()")
    end
end


function set_omega_n(d, omega::Array{Float64, 1})
    dims_omega = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_omega_n_omega_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, omega, dims_omega)
    dims = collect(UInt, size(omega))
    if dims[1] != dims_omega[1]
        error(@sprintf("dimension 1 of omega input (%d) must be == %d", dims[1], dims_omega[1]))
    end
    r = ccall((:xrtm_set_omega_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, omega)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_n()")
    end
end


function get_omega(d, i_layer)
    r = ccall((:xrtm_get_omega, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_layer)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_omega()")
    end
    r
end


function set_omega_l_11(d, i_layer, i_deriv, omega_l)
    r = ccall((:xrtm_set_omega_l_11, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cdouble), d, i_layer, i_deriv, omega_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_l_11()")
    end
end


function set_omega_l_n1(d, i_deriv, omega_l::Array{Float64, 1})
    dims_omega_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_omega_l_n1_omega_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_deriv, omega_l, dims_omega_l)
    dims = collect(UInt, size(omega_l))
    if dims[1] != dims_omega_l[1]
        error(@sprintf("dimension 1 of omega_l input (%d) must be == %d", dims[1], dims_omega_l[1]))
    end
    r = ccall((:xrtm_set_omega_l_n1, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_deriv, omega_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_l_n1()")
    end
end


function set_omega_l_1n(d, i_layer, omega_l::Array{Float64, 1})
    dims_omega_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_omega_l_1n_omega_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, omega_l, dims_omega_l)
    dims = collect(UInt, size(omega_l))
    if dims[1] != dims_omega_l[1]
        error(@sprintf("dimension 1 of omega_l input (%d) must be == %d", dims[1], dims_omega_l[1]))
    end
    r = ccall((:xrtm_set_omega_l_1n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_layer, omega_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_l_1n()")
    end
end


function set_omega_l_nn(d, omega_l::Array{Float64, 2})
    dims_omega_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_omega_l_nn_omega_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, omega_l, dims_omega_l)
    dims = collect(UInt, size(omega_l))
    if dims[1] != dims_omega_l[2]
        error(@sprintf("dimension 1 of omega_l input (%d) must be == %d", dims[1], dims_omega_l[2]))
    end
    dims = collect(UInt, size(omega_l))
    if dims[2] != dims_omega_l[1]
        error(@sprintf("dimension 2 of omega_l input (%d) must be == %d", dims[2], dims_omega_l[1]))
    end
    omega_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), omega_l, 2, dims_omega_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_omega_l_nn, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, omega_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_omega_l_nn()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), omega_l_mmap, 2)
end


function get_omega_l(d, i_layer, i_deriv)
    r = ccall((:xrtm_get_omega_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint), d, i_layer, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_omega_l()")
    end
    r
end


function set_ltau_1(d, i_layer, ltau)
    r = ccall((:xrtm_set_ltau_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_layer, ltau)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_1()")
    end
end


function set_ltau_n(d, ltau::Array{Float64, 1})
    dims_ltau = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_ltau_n_ltau_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, ltau, dims_ltau)
    dims = collect(UInt, size(ltau))
    if dims[1] != dims_ltau[1]
        error(@sprintf("dimension 1 of ltau input (%d) must be == %d", dims[1], dims_ltau[1]))
    end
    r = ccall((:xrtm_set_ltau_n, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, ltau)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_n()")
    end
end


function get_ltau(d, i_layer)
    r = ccall((:xrtm_get_ltau, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_layer)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_ltau()")
    end
    r
end


function set_ltau_l_11(d, i_layer, i_deriv, ltau_l)
    r = ccall((:xrtm_set_ltau_l_11, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cdouble), d, i_layer, i_deriv, ltau_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_l_11()")
    end
end


function set_ltau_l_n1(d, i_deriv, ltau_l::Array{Float64, 1})
    dims_ltau_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_ltau_l_n1_ltau_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_deriv, ltau_l, dims_ltau_l)
    dims = collect(UInt, size(ltau_l))
    if dims[1] != dims_ltau_l[1]
        error(@sprintf("dimension 1 of ltau_l input (%d) must be == %d", dims[1], dims_ltau_l[1]))
    end
    r = ccall((:xrtm_set_ltau_l_n1, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_deriv, ltau_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_l_n1()")
    end
end


function set_ltau_l_1n(d, i_layer, ltau_l::Array{Float64, 1})
    dims_ltau_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_ltau_l_1n_ltau_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_layer, ltau_l, dims_ltau_l)
    dims = collect(UInt, size(ltau_l))
    if dims[1] != dims_ltau_l[1]
        error(@sprintf("dimension 1 of ltau_l input (%d) must be == %d", dims[1], dims_ltau_l[1]))
    end
    r = ccall((:xrtm_set_ltau_l_1n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_layer, ltau_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_l_1n()")
    end
end


function set_ltau_l_nn(d, ltau_l::Array{Float64, 2})
    dims_ltau_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_ltau_l_nn_ltau_l_dims, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}, Ref{Csize_t}), d, ltau_l, dims_ltau_l)
    dims = collect(UInt, size(ltau_l))
    if dims[1] != dims_ltau_l[2]
        error(@sprintf("dimension 1 of ltau_l input (%d) must be == %d", dims[1], dims_ltau_l[2]))
    end
    dims = collect(UInt, size(ltau_l))
    if dims[2] != dims_ltau_l[1]
        error(@sprintf("dimension 2 of ltau_l input (%d) must be == %d", dims[2], dims_ltau_l[1]))
    end
    ltau_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), ltau_l, 2, dims_ltau_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_ltau_l_nn, library_path), Cint, (Ptr{Cvoid}, Ptr{Cdouble}), d, ltau_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_ltau_l_nn()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), ltau_l_mmap, 2)
end


function get_ltau_l(d, i_layer, i_deriv)
    r = ccall((:xrtm_get_ltau_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint), d, i_layer, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_ltau_l()")
    end
    r
end


function set_kernel_ampfac(d, i_kernel, ampfac)
    r = ccall((:xrtm_set_kernel_ampfac, library_path), Cint, (Ptr{Cvoid}, Cint, Cdouble), d, i_kernel, ampfac)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_ampfac()")
    end
end


function get_kernel_ampfac(d, i_kernel)
    r = ccall((:xrtm_get_kernel_ampfac, library_path), Cdouble, (Ptr{Cvoid}, Cint), d, i_kernel)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_kernel_ampfac()")
    end
    r
end


function set_kernel_params_1(d, i_kernel, i_param, param)
    r = ccall((:xrtm_set_kernel_params_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cdouble), d, i_kernel, i_param, param)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_1()")
    end
end


function set_kernel_params_n(d, i_kernel, params::Array{Float64, 1})
    dims_params = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_kernel_params_n_params_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_kernel, params, dims_params)
    dims = collect(UInt, size(params))
    if dims[1] != dims_params[1]
        error(@sprintf("dimension 1 of params input (%d) must be == %d", dims[1], dims_params[1]))
    end
    r = ccall((:xrtm_set_kernel_params_n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_kernel, params)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_n()")
    end
end


function get_kernel_params(d, i_kernel, i_param)
    r = ccall((:xrtm_get_kernel_params, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint), d, i_kernel, i_param)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_kernel_params()")
    end
    r
end


function set_kernel_ampfac_l_1(d, i_kernel, i_deriv, ampfac_l)
    r = ccall((:xrtm_set_kernel_ampfac_l_1, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cdouble), d, i_kernel, i_deriv, ampfac_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_ampfac_l_1()")
    end
end


function set_kernel_ampfac_l_n(d, i_kernel, ampfac_l::Array{Float64, 1})
    dims_ampfac_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_kernel_ampfac_l_n_ampfac_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_kernel, ampfac_l, dims_ampfac_l)
    dims = collect(UInt, size(ampfac_l))
    if dims[1] != dims_ampfac_l[1]
        error(@sprintf("dimension 1 of ampfac_l input (%d) must be == %d", dims[1], dims_ampfac_l[1]))
    end
    r = ccall((:xrtm_set_kernel_ampfac_l_n, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_kernel, ampfac_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_ampfac_l_n()")
    end
end


function get_kernel_ampfac_l(d, i_kernel, i_deriv)
    r = ccall((:xrtm_get_kernel_ampfac_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint), d, i_kernel, i_deriv)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_kernel_ampfac_l()")
    end
    r
end


function set_kernel_params_l_11(d, i_kernel, i_deriv, i_param, param_l)
    r = ccall((:xrtm_set_kernel_params_l_11, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Cdouble), d, i_kernel, i_deriv, i_param, param_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_l_11()")
    end
end


function set_kernel_params_l_1n(d, i_kernel, i_deriv, params_l::Array{Float64, 1})
    dims_params_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_kernel_params_l_1n_params_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_kernel, i_deriv, params_l, dims_params_l)
    dims = collect(UInt, size(params_l))
    if dims[1] != dims_params_l[1]
        error(@sprintf("dimension 1 of params_l input (%d) must be == %d", dims[1], dims_params_l[1]))
    end
    r = ccall((:xrtm_set_kernel_params_l_1n, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}), d, i_kernel, i_deriv, params_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_l_1n()")
    end
end


function set_kernel_params_l_n1(d, i_kernel, i_param, params_l::Array{Float64, 1})
    dims_params_l = Array{UInt64, 1}(undef, (1))
    r = ccall((:set_kernel_params_l_n1_params_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_kernel, i_param, params_l, dims_params_l)
    dims = collect(UInt, size(params_l))
    if dims[1] != dims_params_l[1]
        error(@sprintf("dimension 1 of params_l input (%d) must be == %d", dims[1], dims_params_l[1]))
    end
    r = ccall((:xrtm_set_kernel_params_l_n1, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}), d, i_kernel, i_param, params_l)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_l_n1()")
    end
end


function set_kernel_params_l_nn(d, i_kernel, params_l::Array{Float64, 2})
    dims_params_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:set_kernel_params_l_nn_params_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, i_kernel, params_l, dims_params_l)
    dims = collect(UInt, size(params_l))
    if dims[1] != dims_params_l[2]
        error(@sprintf("dimension 1 of params_l input (%d) must be == %d", dims[1], dims_params_l[2]))
    end
    dims = collect(UInt, size(params_l))
    if dims[2] != dims_params_l[1]
        error(@sprintf("dimension 2 of params_l input (%d) must be == %d", dims[2], dims_params_l[1]))
    end
    params_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), params_l, 2, dims_params_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_set_kernel_params_l_nn, library_path), Cint, (Ptr{Cvoid}, Cint, Ptr{Cdouble}), d, i_kernel, params_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_set_kernel_params_l_nn()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), params_l_mmap, 2)
end


function get_kernel_params_l(d, i_kernel, i_deriv, i_param)
    r = ccall((:xrtm_get_kernel_params_l, library_path), Cdouble, (Ptr{Cvoid}, Cint, Cint, Cint), d, i_kernel, i_deriv, i_param)
    if r == XRTM_DBL_ERROR
        error("xrtm_get_kernel_params_l()")
    end
    r
end


function update_varied_layers(d)
    r = ccall((:xrtm_update_varied_layers, library_path), Cint, (Ptr{Cvoid}, ), d)
    if r == XRTM_INT_ERROR
        error("xrtm_update_varied_layers()")
    end
end


function qx(d)
    dims_qx = Array{UInt64, 1}(undef, (1))
    r = ccall((:qx_qx_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_qx)
    qx = Array{Float64, 1}(undef, (dims_qx[1]))
    r = ccall((:xrtm_qx, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, qx)
    if r == XRTM_INT_ERROR
        error("xrtm_qx()")
    end
    qx
end


function qw(d)
    dims_qw = Array{UInt64, 1}(undef, (1))
    r = ccall((:qw_qw_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_qw)
    qw = Array{Float64, 1}(undef, (dims_qw[1]))
    r = ccall((:xrtm_qw, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, qw)
    if r == XRTM_INT_ERROR
        error("xrtm_qw()")
    end
    qw
end


function kernel_qx(d)
    dims_kernel_qx = Array{UInt64, 1}(undef, (1))
    r = ccall((:kernel_qx_kernel_qx_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_kernel_qx)
    kernel_qx = Array{Float64, 1}(undef, (dims_kernel_qx[1]))
    r = ccall((:xrtm_kernel_qx, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, kernel_qx)
    if r == XRTM_INT_ERROR
        error("xrtm_kernel_qx()")
    end
    kernel_qx
end


function kernel_qw(d)
    dims_kernel_qw = Array{UInt64, 1}(undef, (1))
    r = ccall((:kernel_qw_kernel_qw_dims, library_path), Cint, (Ptr{Cvoid}, Ref{Csize_t}), d, dims_kernel_qw)
    kernel_qw = Array{Float64, 1}(undef, (dims_kernel_qw[1]))
    r = ccall((:xrtm_kernel_qw, library_path), Cint, (Ptr{Cvoid}, Ref{Cdouble}), d, kernel_qw)
    if r == XRTM_INT_ERROR
        error("xrtm_kernel_qw()")
    end
    kernel_qw
end


function solution(d, solver_string::String, solutions, n_out_phis, out_phis::Array{Float64, 2})
    solver = ccall((:xrtm_solver_name_to_mask, library_path), Cint, (Cstring, ), solver_string)
    if solver == -1
        error("xrtm_solver_name_to_mask()")
    end
    dims_out_phis = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_out_phis_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_out_phis)
    dims_I_p = Array{UInt64, 1}(undef, (4))
    r = ccall((:solution_I_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_I_p)
    dims_I_m = Array{UInt64, 1}(undef, (4))
    r = ccall((:solution_I_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_I_m)
    dims_K_p = Array{UInt64, 1}(undef, (5))
    r = ccall((:solution_K_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_K_p)
    dims_K_m = Array{UInt64, 1}(undef, (5))
    r = ccall((:solution_K_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_K_m)
    dims_mean_p = Array{UInt64, 1}(undef, (1))
    r = ccall((:solution_mean_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_mean_p)
    dims_mean_m = Array{UInt64, 1}(undef, (1))
    r = ccall((:solution_mean_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_mean_m)
    dims_mean_p_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_mean_p_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_mean_p_l)
    dims_mean_m_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_mean_m_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_mean_m_l)
    dims_flux_p = Array{UInt64, 1}(undef, (1))
    r = ccall((:solution_flux_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_p)
    dims_flux_m = Array{UInt64, 1}(undef, (1))
    r = ccall((:solution_flux_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_m)
    dims_flux_p_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_flux_p_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_p_l)
    dims_flux_m_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_flux_m_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_m_l)
    dims_flux_div = Array{UInt64, 1}(undef, (1))
    r = ccall((:solution_flux_div_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_div)
    dims_flux_div_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:solution_flux_div_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, solutions, n_out_phis, out_phis, dims_flux_div_l)
    dims = collect(UInt, size(out_phis))
    if dims[1] != dims_out_phis[2]
        error(@sprintf("dimension 1 of out_phis input (%d) must be == %d", dims[1], dims_out_phis[2]))
    end
    dims = collect(UInt, size(out_phis))
    if dims[2] != dims_out_phis[1]
        error(@sprintf("dimension 2 of out_phis input (%d) must be == %d", dims[2], dims_out_phis[1]))
    end
    I_p = Array{Float64, 4}(undef, (dims_I_p[4], dims_I_p[3], dims_I_p[2], dims_I_p[1]))
    I_m = Array{Float64, 4}(undef, (dims_I_m[4], dims_I_m[3], dims_I_m[2], dims_I_m[1]))
    K_p = Array{Float64, 5}(undef, (dims_K_p[5], dims_K_p[4], dims_K_p[3], dims_K_p[2], dims_K_p[1]))
    K_m = Array{Float64, 5}(undef, (dims_K_m[5], dims_K_m[4], dims_K_m[3], dims_K_m[2], dims_K_m[1]))
    mean_p = Array{Float64, 1}(undef, (dims_mean_p[1]))
    mean_m = Array{Float64, 1}(undef, (dims_mean_m[1]))
    mean_p_l = Array{Float64, 2}(undef, (dims_mean_p_l[2], dims_mean_p_l[1]))
    mean_m_l = Array{Float64, 2}(undef, (dims_mean_m_l[2], dims_mean_m_l[1]))
    flux_p = Array{Float64, 1}(undef, (dims_flux_p[1]))
    flux_m = Array{Float64, 1}(undef, (dims_flux_m[1]))
    flux_p_l = Array{Float64, 2}(undef, (dims_flux_p_l[2], dims_flux_p_l[1]))
    flux_m_l = Array{Float64, 2}(undef, (dims_flux_m_l[2], dims_flux_m_l[1]))
    flux_div = Array{Float64, 1}(undef, (dims_flux_div[1]))
    flux_div_l = Array{Float64, 2}(undef, (dims_flux_div_l[2], dims_flux_div_l[1]))
    out_phis_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), out_phis, 2, dims_out_phis, sizeof(Cdouble), 1)
    I_p_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), I_p, 4, dims_I_p, sizeof(Cdouble), 1)
    I_m_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), I_m, 4, dims_I_m, sizeof(Cdouble), 1)
    K_p_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), K_p, 5, dims_K_p, sizeof(Cdouble), 1)
    K_m_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), K_m, 5, dims_K_m, sizeof(Cdouble), 1)
    mean_p_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), mean_p_l, 2, dims_mean_p_l, sizeof(Cdouble), 1)
    mean_m_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), mean_m_l, 2, dims_mean_m_l, sizeof(Cdouble), 1)
    flux_p_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_p_l, 2, dims_flux_p_l, sizeof(Cdouble), 1)
    flux_m_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_m_l, 2, dims_flux_m_l, sizeof(Cdouble), 1)
    flux_div_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_div_l, 2, dims_flux_div_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_solution, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Cint, Ptr{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}), d, solver, solutions, n_out_phis, out_phis_mmap, I_p_mmap, I_m_mmap, K_p_mmap, K_m_mmap, mean_p, mean_m, mean_p_l_mmap, mean_m_l_mmap, flux_p, flux_m, flux_p_l_mmap, flux_m_l_mmap, flux_div, flux_div_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_solution()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), out_phis_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), I_p_mmap, 4)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), I_m_mmap, 4)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), K_p_mmap, 5)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), K_m_mmap, 5)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), mean_p_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), mean_m_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_p_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_m_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_div_l_mmap, 2)
    I_p, I_m, K_p, K_m, mean_p, mean_m, mean_p_l, mean_m_l, flux_p, flux_m, flux_p_l, flux_m_l, flux_div, flux_div_l
end


function radiance(d, solver_string::String, n_out_phis, out_phis::Array{Float64, 2})
    solver = ccall((:xrtm_solver_name_to_mask, library_path), Cint, (Cstring, ), solver_string)
    if solver == -1
        error("xrtm_solver_name_to_mask()")
    end
    dims_out_phis = Array{UInt64, 1}(undef, (2))
    r = ccall((:radiance_out_phis_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, n_out_phis, out_phis, dims_out_phis)
    dims_I_p = Array{UInt64, 1}(undef, (4))
    r = ccall((:radiance_I_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, n_out_phis, out_phis, dims_I_p)
    dims_I_m = Array{UInt64, 1}(undef, (4))
    r = ccall((:radiance_I_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, n_out_phis, out_phis, dims_I_m)
    dims_K_p = Array{UInt64, 1}(undef, (5))
    r = ccall((:radiance_K_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, n_out_phis, out_phis, dims_K_p)
    dims_K_m = Array{UInt64, 1}(undef, (5))
    r = ccall((:radiance_K_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Csize_t}), d, solver, n_out_phis, out_phis, dims_K_m)
    dims = collect(UInt, size(out_phis))
    if dims[1] != dims_out_phis[2]
        error(@sprintf("dimension 1 of out_phis input (%d) must be == %d", dims[1], dims_out_phis[2]))
    end
    dims = collect(UInt, size(out_phis))
    if dims[2] != dims_out_phis[1]
        error(@sprintf("dimension 2 of out_phis input (%d) must be == %d", dims[2], dims_out_phis[1]))
    end
    I_p = Array{Float64, 4}(undef, (dims_I_p[4], dims_I_p[3], dims_I_p[2], dims_I_p[1]))
    I_m = Array{Float64, 4}(undef, (dims_I_m[4], dims_I_m[3], dims_I_m[2], dims_I_m[1]))
    K_p = Array{Float64, 5}(undef, (dims_K_p[5], dims_K_p[4], dims_K_p[3], dims_K_p[2], dims_K_p[1]))
    K_m = Array{Float64, 5}(undef, (dims_K_m[5], dims_K_m[4], dims_K_m[3], dims_K_m[2], dims_K_m[1]))
    out_phis_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), out_phis, 2, dims_out_phis, sizeof(Cdouble), 1)
    I_p_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), I_p, 4, dims_I_p, sizeof(Cdouble), 1)
    I_m_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), I_m, 4, dims_I_m, sizeof(Cdouble), 1)
    K_p_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), K_p, 5, dims_K_p, sizeof(Cdouble), 1)
    K_m_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), K_m, 5, dims_K_m, sizeof(Cdouble), 1)
    r = ccall((:xrtm_radiance, library_path), Cint, (Ptr{Cvoid}, Cint, Cint, Ptr{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}), d, solver, n_out_phis, out_phis_mmap, I_p_mmap, I_m_mmap, K_p_mmap, K_m_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_radiance()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), out_phis_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), I_p_mmap, 4)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), I_m_mmap, 4)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), K_p_mmap, 5)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), K_m_mmap, 5)
    I_p, I_m, K_p, K_m
end


function mean_radiance(d, solver_string::String)
    solver = ccall((:xrtm_solver_name_to_mask, library_path), Cint, (Cstring, ), solver_string)
    if solver == -1
        error("xrtm_solver_name_to_mask()")
    end
    dims_mean_p = Array{UInt64, 1}(undef, (1))
    r = ccall((:mean_radiance_mean_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_mean_p)
    dims_mean_m = Array{UInt64, 1}(undef, (1))
    r = ccall((:mean_radiance_mean_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_mean_m)
    dims_mean_p_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:mean_radiance_mean_p_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_mean_p_l)
    dims_mean_m_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:mean_radiance_mean_m_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_mean_m_l)
    mean_p = Array{Float64, 1}(undef, (dims_mean_p[1]))
    mean_m = Array{Float64, 1}(undef, (dims_mean_m[1]))
    mean_p_l = Array{Float64, 2}(undef, (dims_mean_p_l[2], dims_mean_p_l[1]))
    mean_m_l = Array{Float64, 2}(undef, (dims_mean_m_l[2], dims_mean_m_l[1]))
    mean_p_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), mean_p_l, 2, dims_mean_p_l, sizeof(Cdouble), 1)
    mean_m_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), mean_m_l, 2, dims_mean_m_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_mean_radiance, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}), d, solver, mean_p, mean_m, mean_p_l_mmap, mean_m_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_mean_radiance()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), mean_p_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), mean_m_l_mmap, 2)
    mean_p, mean_m, mean_p_l, mean_m_l
end


function flux(d, solver_string::String)
    solver = ccall((:xrtm_solver_name_to_mask, library_path), Cint, (Cstring, ), solver_string)
    if solver == -1
        error("xrtm_solver_name_to_mask()")
    end
    dims_flux_p = Array{UInt64, 1}(undef, (1))
    r = ccall((:flux_flux_p_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_p)
    dims_flux_m = Array{UInt64, 1}(undef, (1))
    r = ccall((:flux_flux_m_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_m)
    dims_flux_p_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:flux_flux_p_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_p_l)
    dims_flux_m_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:flux_flux_m_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_m_l)
    flux_p = Array{Float64, 1}(undef, (dims_flux_p[1]))
    flux_m = Array{Float64, 1}(undef, (dims_flux_m[1]))
    flux_p_l = Array{Float64, 2}(undef, (dims_flux_p_l[2], dims_flux_p_l[1]))
    flux_m_l = Array{Float64, 2}(undef, (dims_flux_m_l[2], dims_flux_m_l[1]))
    flux_p_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_p_l, 2, dims_flux_p_l, sizeof(Cdouble), 1)
    flux_m_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_m_l, 2, dims_flux_m_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_flux, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}, Ref{Cdouble}), d, solver, flux_p, flux_m, flux_p_l_mmap, flux_m_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_flux()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_p_l_mmap, 2)
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_m_l_mmap, 2)
    flux_p, flux_m, flux_p_l, flux_m_l
end


function flux_divergence(d, solver_string::String)
    solver = ccall((:xrtm_solver_name_to_mask, library_path), Cint, (Cstring, ), solver_string)
    if solver == -1
        error("xrtm_solver_name_to_mask()")
    end
    dims_flux_div = Array{UInt64, 1}(undef, (1))
    r = ccall((:flux_divergence_flux_div_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_div)
    dims_flux_div_l = Array{UInt64, 1}(undef, (2))
    r = ccall((:flux_divergence_flux_div_l_dims, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Csize_t}), d, solver, dims_flux_div_l)
    flux_div = Array{Float64, 1}(undef, (dims_flux_div[1]))
    flux_div_l = Array{Float64, 2}(undef, (dims_flux_div_l[2], dims_flux_div_l[1]))
    flux_div_l_mmap = ccall((:array_from_mem, library_path), Ptr{Cdouble}, (Ref{Cdouble}, Cint, Ref{Csize_t}, Csize_t, Cint), flux_div_l, 2, dims_flux_div_l, sizeof(Cdouble), 1)
    r = ccall((:xrtm_flux_divergence, library_path), Cint, (Ptr{Cvoid}, Cint, Ref{Cdouble}, Ref{Cdouble}), d, solver, flux_div, flux_div_l_mmap)
    if r == XRTM_INT_ERROR
        error("xrtm_flux_divergence()")
    end
    ccall((:free_array, library_path), Cvoid, (Ptr{Cdouble}, Cint), flux_div_l_mmap, 2)
    flux_div, flux_div_l
end


end
