/*******************************************************************************
 * This file was generated by bindx version 0.01.  Edit at your own risk.
 ******************************************************************************/

#ifndef XRTM_FD_INT_CPP_H
#define XRTM_FD_INT_CPP_H

#include <gutil.h>

#include <xrtm_fd_interface.h>

#include "xrtm_int_cpp.h"


class xrtm_fd_int_cpp
{
private:
     xrtm_fd_data d;


public:
     enum xrtm_fd_errors { ERROR };

     enum method_type {
          METHOD_FORWARD = XRTM_FD_METHOD_FORWARD,
          METHOD_BACKWARD = XRTM_FD_METHOD_BACKWARD,
          METHOD_CENTRAL = XRTM_FD_METHOD_CENTRAL
     };


     xrtm_fd_int_cpp(xrtm_data *xrtm, int n_derivs);
     ~xrtm_fd_int_cpp();
     int get_n_derivs();
     void set_delta(double *delta);
     void get_delta(double *delta);
     void set_F_iso_top_p_1(int i_deriv, double F_iso_top_l);
     void set_F_iso_top_p_n(double *F_iso_top_l);
     double get_F_iso_top_p(int i_deriv);
     void set_F_iso_bot_p_1(int i_deriv, double F_iso_bot_l);
     void set_F_iso_bot_p_n(double *F_iso_bot_l);
     double get_F_iso_bot_p(int i_deriv);
     void set_levels_b_p_1(int i_deriv, double *levels_b_l);
     void set_levels_b_p_n(double **levels_b_l);
     double get_levels_b_p(int i_deriv, double *levels_b_l);
     void set_surface_b_p_1(int i_deriv, double surface_b_l);
     void set_surface_b_p_n(double *surface_b_l);
     double get_surface_b_p(int i_deriv);
     void set_g_p_11(int i_layer, int i_deriv, double g_l);
     void set_g_p_n1(int i_deriv, double *g_l);
     void set_g_p_1n(int i_layer, double *g_l);
     void set_g_p_nn(double **g_l);
     double get_g_p(int i_layer, int i_deriv);
     void set_coef_p_11(int i_layer, int i_deriv, double **coef_l);
     void set_coef_p_n1(int i_deriv, double ***coef_l);
     void set_coef_p_1n(int i_layer, double ***coef_l);
     void set_coef_p_nn(double ****coef_l);
     double get_coef_p(int i_layer, int i_deriv, int i_elem, int i_coef);
     void set_omega_p_11(int i_layer, int i_deriv, double omega_l);
     void set_omega_p_n1(int i_deriv, double *omega_l);
     void set_omega_p_1n(int i_layer, double *omega_l);
     void set_omega_p_nn(double **omega_l);
     double get_omega_p(int i_layer, int i_deriv);
     void set_ltau_p_11(int i_layer, int i_deriv, double ltau_l);
     void set_ltau_p_n1(int i_deriv, double *ltau_l);
     void set_ltau_p_1n(int i_layer, double *ltau_l);
     void set_ltau_p_nn(double **ltau_l);
     double get_ltau_p(int i_layer, int i_deriv);
     void set_kernel_ampfac_p_1(int i_kernel, int i_deriv, double ampfac_l);
     void set_kernel_ampfac_p_n(int i_kernel, double *ampfac_l);
     double get_kernel_ampfac_p(int i_kernel, int i_deriv);
     void set_kernel_params_p_11(int i_kernel, int i_deriv, int i_param, double param_l);
     void set_kernel_params_p_1n(int i_kernel, int i_deriv, double *params_l);
     void set_kernel_params_p_n1(int i_kernel, int i_param, double *params_l);
     void set_kernel_params_p_nn(int i_kernel, double **params_l);
     double get_kernel_params_p(int i_kernel, int i_deriv, int i_param);
     void solution(xrtm_int_cpp::solver_mask solver, int solutions, method_type method, int n_out_phis, double **out_phis, double ****I_p, double ****I_m, double *****K_p, double *****K_m, double *mean_p, double *mean_m, double **mean_p_l, double **mean_m_l, double *flux_p, double *flux_m, double **flux_p_l, double **flux_m_l, double *flux_div, double **flux_div_l);
     void radiance(xrtm_int_cpp::solver_mask solver, method_type method, int n_out_phis, double **out_phis, double ****I_p, double ****I_m, double *****K_p, double *****K_m);
};

#endif /* XRTM_FD_INT_CPP_H */
