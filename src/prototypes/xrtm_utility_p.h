/* xrtm_utility.c */
void calc_quad_and_umus(int n_quad, int n_umus, int n_stokes, int *n_quad_x_, int *n_quad_d_, int *n_quad_v, int *n_quad_v_x, int *n_quad_v_d, int *n_umus_v, int flag);
uchar *flags_alloc(int n);
void flags_free(uchar *a);
void flags_init(uchar *a, int n, uchar x);
void flags_copy(uchar *b, uchar *a, int n);
uchar **flags_alloc2(int m, int n);
void flags_free2(uchar **a);
void flags_init2(uchar **a, int m, int n, uchar x);
void flags_copy2(uchar **b, uchar **a, int m, int n);
int flags_fill_meta(uchar *flags, int n);
int flags_fill_meta2(uchar **flags, int m, int n);
int flags_count(void *flags, int n);
int flags_or(void *flags, int n);
int flags_and(void *flags, int n);
int flags_count2(uchar **flags, int m, int n);
int flags_or2(uchar **flags, int m, int n);
int flags_and2(uchar **flags, int m, int n);
void derivs_merge_s(int n_derivs, uchar *derivs_s1, uchar *derivs_sm, uchar *derivs_s);
uchar derivs_union_bitwise_or(int n_derivs, uchar *derivs1);
void derivs_union_logical_or2(int n_layers, int n_derivs, uchar **derivs1, uchar *derivs2);
void derivs_union_bitwise_or2(int n_layers, int n_derivs, uchar **derivs1, uchar *derivs2);
double singularity_adjust_up(double base, double value, double epsilon);
double singularity_adjust_down(double base, double value, double epsilon);
double singularity_adjust_auto(double base, double value, double epsilon);
int check_phase_vecs_norm(int n_quad, int n_stokes, double *qx, double *qw, double *P_p, double *P_m);
int check_phase_mats_norm(int n_quad1, int n_quad2, int n_stokes, double *qx, double *qw, double **P_p, double **P_m);
int check_phase_vecs_norm_l(int n_quad, int n_stokes, double *qx, double *qw, double *P_p_l, double *P_m_l);
int check_phase_mats_norm_l(int n_quad1, int n_quad2, int n_stokes, double *qx, double *qw, double **P_p_l, double **P_m_l);
int check_R_and_T_norm(int n_quad, int n_stokes, double **R, double **T);
int check_R_and_T_norm_l(int n_quad, int n_stokes, double **R_l, double **T_l);
int check_conserve_energy(int n_quad, int n_stokes, double *qx, double *qw, double F_0, double mu_0, double btran, double *I_p, double *I_m);
int check_conserve_energy_l(int n_quad, int n_stokes, double *qx, double *qw, double F_0, double mu_0, double btran_l, double *I_p_l, double *I_m_l);
void delta_m_g(int n_derivs, double f, double *f_l, double g, double *g_prime, double *g_l, double *g_prime_l, int derivs);
void delta_m_g_l(int n_derivs, double f, double *f_l, double g, double *g_l, double *g_prime_l);
void delta_m_coef(int n_coef, int n_derivs, double f, double *f_l, double **coef, double **coef_prime, double ***coef_l, double ***coef_prime_l, int allsix, int coef_type, int derivs);
void delta_m_coef_l(int n_coef, int n_derivs, double f, double *f_l, double **coef, double ***coef_l, double ***coef_prime_l, int allsix, int coef_type);
void delta_m_omega(int n_derivs, double f, double *f_l, double omega, double *omega_prime, double *omega_l, double *omega_prime_l, int derivs);
void delta_m_omega_l(int n_derivs, double f, double *f_l, double omega, double *omega_l, double *omega_prime_l);
void delta_m_ltau(int n_derivs, double f, double *f_l, double omega, double *omega_l, double ltau, double *ltau_prime, double *ltau_l, double *ltau_prime_l, int derivs);
void delta_m_ltau_l(int n_derivs, double f, double *f_l, double omega, double *omega_l, double ltau, double *ltau_l, double *ltau_prime_l);
void delta_m(int n_coef, int n_derivs, double f, double *f_l, double **coef, double **coef_prime, double omega, double *omega_prime, double ltau, double *ltau_prime, double ***coef_l, double ***coef_prime_l, double *omega_l, double *omega_prime_l, double *ltau_l, double *ltau_prime_l, int allsix, int coef_type, int derivs);
void delta_m_l(int n_coef, int n_derivs, double f, double *f_l, double **coef, double omega, double ltau, double ***coef_l, double ***coef_prime_l, double *omega_l, double *omega_prime_l, double *ltau_l, double *ltau_prime_l, int allsix, int coef_type);
void n_t_tms_scaling(int n_derivs, double f, double *f_l, double omega0, double *omega_tms, double *omega0_l, double *omega_tms_l);
void chapman_functions(int n_layers, double mu_0, double z0, double *z, double **chap);
void build_local_r_and_t(int i_four, int n_quad, int n_derivs, double *qx_v, double *qw_v, double omega, double *omega_l, double **P_p, double **P_m, double **r, double **t, double ***P_p_l, double ***P_m_l, double ***r_l, double ***t_l, uchar *derivs, work_data work);
void build_txr(int n_quad, int n_stokes, int n_derivs, double **r_p, double **t_p, double **tpr, double **tmr, double ***r_p_l, double ***t_p_l, double ***tpr_l, double ***tmr_l, uchar *derivs, work_data work);
void build_gamma(int n_quad, int n_derivs, double **tpr, double **tmr, double **gamma, double ***tpr_l, double ***tmr_l, double ***gamma_l, uchar *derivs, work_data work);
void build_sim_vectors(int n_quad, int n_umus, double *qx_v, double *qw_v, double *v1, double *v2);
void vec_sim_trans(int m, double *a, double *s);
void mat_sim_trans(int m, int n, double **a, double *s1, double *s2);
void vec_sim_trans2(int m, double *a1, double *a2, double *s1);
void mat_sim_trans2(int m, int n, double **a1, double **a2, double *s1, double *s2);
void dm_v_mul_D_A(int n_quad, int n_stokes, double *a, double *b);
void dmat_mul_D_A(int n_quad, int n_stokes, double **a, double **b);
void dmat_mul_D_A2(int n_quad1, int n_stokes1, int n_quad2, int n_stokes2, double **a, double **b);
void no_scatter_r_t_s(int n_quad, int n_derivs, double *qx_v, double *qw_v, double ltau, double *ltau_l, double **R_p, double **T_p, double **R_m, double **T_m, double *S_p, double *S_m, double *Sl_p, double *Sl_m, double ***R_p_l, double ***T_p_l, double ***R_m_l, double ***T_m_l, double **S_p_l, double **S_m_l, double **Sl_p_l, double **Sl_m_l, int solar, int thermal, uchar *derivs_layers, uchar *derivs_beam, uchar *derivs_thermal);
